LexToken(PRINT,'print',1,0)
LexToken(INT,1,1,6)
LexToken(PLUS,'+',1,8)
LexToken(INT,2,1,10)


--------AST--------
Module(None, Stmt([Printnl([Add((Const(1), Const(2)))], None)]))

-------ExpAST-------
Module(None, Stmt([Printnl([Let(let_var1, InjectFrom('Const(0)', Const(1)), Let(let_var2, InjectFrom('Const(0)', Const(2)), IfExp(InjectFrom('Const(0)', And([Or([CallFunc(Name('is_int'), [Name('let_var1')], None, None), CallFunc(Name('is_bool'), [Name('let_var1')], None, None)]), Or([CallFunc(Name('is_int'), [Name('let_var2')], None, None), CallFunc(Name('is_bool'), [Name('let_var2')], None, None)])])), InjectFrom('Const(0)', Add((ProjectTo('Const(0)', let_var1), ProjectTo('Const(0)', let_var2)))), IfExp(InjectFrom('Const(0)', And([CallFunc(Name('is_big'), [Name('let_var1')], None, None), CallFunc(Name('is_big'), [Name('let_var2')], None, None)])), InjectFrom('Const(3)', CallFunc(Name('add'), [ProjectTo('Const(3)', let_var1), ProjectTo('Const(3)', let_var2)], None, None)), CallFunc(Name('error_pyobj'), [Name('1')], None, None)))))], None)]))

-------FLATTEN-------
tmp2 = 1
tmp1 = tmp2 << 2
tmp1 = tmp1 | 0
tmp0 = tmp1
tmp6 = 2
tmp5 = tmp6 << 2
tmp5 = tmp5 | 0
tmp4 = tmp5
tmp13 = is_int(tmp0)
tmp14 = is_bool(tmp0)
tmp12 = tmp13 or tmp14
tmp16 = is_int(tmp4)
tmp17 = is_bool(tmp4)
tmp15 = tmp16 or tmp17
tmp11 = tmp12 and tmp15
tmp10 = tmp11
tmp9 = tmp10 << 2
tmp9 = tmp9 | 0
tmp8 = tmp9
tmp8 = is_true(tmp8)
tmp18 = 0
tmp8 = tmp8!= tmp18
if0 = tmp8
tmp22 = tmp0 >> 2
tmp23 = tmp4 >> 2
tmp24 = tmp22 + tmp23
tmp21 = tmp24
tmp20 = tmp21 << 2
tmp20 = tmp20 | 0
tmp19 = tmp20
else0
tmp29 = is_big(tmp0)
tmp30 = is_big(tmp4)
tmp28 = tmp29 and tmp30
tmp27 = tmp28
tmp26 = tmp27 << 2
tmp26 = tmp26 | 0
tmp25 = tmp26
tmp25 = is_true(tmp25)
tmp31 = 0
tmp25 = tmp25!= tmp31
if1 = tmp25
tmp37 = ~3
tmp36 = tmp0 & tmp37
tmp39 = ~3
tmp38 = tmp4 & tmp39
tmp35 = add(tmp36, tmp38)
tmp34 = tmp35
tmp33 = tmp34 | 3
tmp32 = tmp33
else1
tmp40 = error_pyobj(tmp41)
tmp32 = tmp40
endif1
tmp19 = tmp32
endif0
tmp7 = tmp19
tmp3 = tmp7
print tmp3


-------AST_flat-------
Module(None, Stmt([Assign([AssName('tmp2', 'OP_ASSIGN')], Const(1)), Assign([AssName('tmp1', 'OP_ASSIGN')], LeftShift((Name('tmp2'), Const(2)))), Assign([AssName('tmp1', 'OP_ASSIGN')], Bitor([Name('tmp1'), Const(0)])), Assign([AssName('tmp0', 'OP_ASSIGN')], Name('tmp1')), Assign([AssName('tmp6', 'OP_ASSIGN')], Const(2)), Assign([AssName('tmp5', 'OP_ASSIGN')], LeftShift((Name('tmp6'), Const(2)))), Assign([AssName('tmp5', 'OP_ASSIGN')], Bitor([Name('tmp5'), Const(0)])), Assign([AssName('tmp4', 'OP_ASSIGN')], Name('tmp5')), Assign([AssName('tmp13', 'OP_ASSIGN')], CallFunc(Name('is_int'), [Name('tmp0')], None, None)), Assign([AssName('tmp14', 'OP_ASSIGN')], CallFunc(Name('is_bool'), [Name('tmp0')], None, None)), Assign([AssName('tmp12', 'OP_ASSIGN')], Or([Name('tmp13'), Name('tmp14')])), Assign([AssName('tmp16', 'OP_ASSIGN')], CallFunc(Name('is_int'), [Name('tmp4')], None, None)), Assign([AssName('tmp17', 'OP_ASSIGN')], CallFunc(Name('is_bool'), [Name('tmp4')], None, None)), Assign([AssName('tmp15', 'OP_ASSIGN')], Or([Name('tmp16'), Name('tmp17')])), Assign([AssName('tmp11', 'OP_ASSIGN')], And([Name('tmp12'), Name('tmp15')])), Assign([AssName('tmp10', 'OP_ASSIGN')], Name('tmp11')), Assign([AssName('tmp9', 'OP_ASSIGN')], LeftShift((Name('tmp10'), Const(2)))), Assign([AssName('tmp9', 'OP_ASSIGN')], Bitor([Name('tmp9'), Const(0)])), Assign([AssName('tmp8', 'OP_ASSIGN')], Name('tmp9')), Assign([AssName('tmp8', 'OP_ASSIGN')], CallFunc(Name('is_true'), [Name('tmp8')], None, None)), Assign([AssName('tmp18', 'OP_ASSIGN')], Const(0)), Assign([AssName('tmp8', 'OP_ASSIGN')], Compare(Name('tmp8'), [('!=', Name('tmp18'))])), Assign([AssName('if0', 'OP_ASSIGN')], Name('tmp8')), Assign([AssName('tmp22', 'OP_ASSIGN')], RightShift((Name('tmp0'), Const(2)))), Assign([AssName('tmp23', 'OP_ASSIGN')], RightShift((Name('tmp4'), Const(2)))), Assign([AssName('tmp24', 'OP_ASSIGN')], Add((Name('tmp22'), Name('tmp23')))), Assign([AssName('tmp21', 'OP_ASSIGN')], Name('tmp24')), Assign([AssName('tmp20', 'OP_ASSIGN')], LeftShift((Name('tmp21'), Const(2)))), Assign([AssName('tmp20', 'OP_ASSIGN')], Bitor([Name('tmp20'), Const(0)])), Assign([AssName('tmp19', 'OP_ASSIGN')], Name('tmp20')), Discard(Name('else0')), Assign([AssName('tmp29', 'OP_ASSIGN')], CallFunc(Name('is_big'), [Name('tmp0')], None, None)), Assign([AssName('tmp30', 'OP_ASSIGN')], CallFunc(Name('is_big'), [Name('tmp4')], None, None)), Assign([AssName('tmp28', 'OP_ASSIGN')], And([Name('tmp29'), Name('tmp30')])), Assign([AssName('tmp27', 'OP_ASSIGN')], Name('tmp28')), Assign([AssName('tmp26', 'OP_ASSIGN')], LeftShift((Name('tmp27'), Const(2)))), Assign([AssName('tmp26', 'OP_ASSIGN')], Bitor([Name('tmp26'), Const(0)])), Assign([AssName('tmp25', 'OP_ASSIGN')], Name('tmp26')), Assign([AssName('tmp25', 'OP_ASSIGN')], CallFunc(Name('is_true'), [Name('tmp25')], None, None)), Assign([AssName('tmp31', 'OP_ASSIGN')], Const(0)), Assign([AssName('tmp25', 'OP_ASSIGN')], Compare(Name('tmp25'), [('!=', Name('tmp31'))])), Assign([AssName('if1', 'OP_ASSIGN')], Name('tmp25')), Assign([AssName('tmp37', 'OP_ASSIGN')], Invert(Const(3))), Assign([AssName('tmp36', 'OP_ASSIGN')], Bitand([Name('tmp0'), Name('tmp37')])), Assign([AssName('tmp39', 'OP_ASSIGN')], Invert(Const(3))), Assign([AssName('tmp38', 'OP_ASSIGN')], Bitand([Name('tmp4'), Name('tmp39')])), Assign([AssName('tmp35', 'OP_ASSIGN')], CallFunc(Name('add'), [Name('tmp36'), Name('tmp38')], None, None)), Assign([AssName('tmp34', 'OP_ASSIGN')], Name('tmp35')), Assign([AssName('tmp33', 'OP_ASSIGN')], Bitor([Name('tmp34'), Const(3)])), Assign([AssName('tmp32', 'OP_ASSIGN')], Name('tmp33')), Discard(Name('else1')), Assign([AssName('tmp40', 'OP_ASSIGN')], CallFunc(Name('error_pyobj'), [Name('tmp41')], None, None)), Assign([AssName('tmp32', 'OP_ASSIGN')], Name('tmp40')), Discard(Name('endif1')), Assign([AssName('tmp19', 'OP_ASSIGN')], Name('tmp32')), Discard(Name('endif0')), Assign([AssName('tmp7', 'OP_ASSIGN')], Name('tmp19')), Assign([AssName('tmp3', 'OP_ASSIGN')], Name('tmp7')), Printnl([Name('tmp3')], None)]))

-------x86_IR-------
['movl', '$1', 'tmp2']
['movl', 'tmp2', 'tmp42']
['shl', 'tmp42', '$2']
['movl', 'tmp42', 'tmp1']
['movl', 'tmp1', 'tmp43']
['or', 'tmp43', '$0']
['movl', 'tmp43', 'tmp1']
['movl', 'tmp1', 'tmp0']
['movl', '$2', 'tmp6']
['movl', 'tmp6', 'tmp44']
['shl', 'tmp44', '$2']
['movl', 'tmp44', 'tmp5']
['movl', 'tmp5', 'tmp45']
['or', 'tmp45', '$0']
['movl', 'tmp45', 'tmp5']
['movl', 'tmp5', 'tmp4']
['call', 'is_int', ['tmp0']]
['movl', '%eax', 'tmp46']
['movl', 'tmp46', 'tmp13']
['call', 'is_bool', ['tmp0']]
['movl', '%eax', 'tmp47']
['movl', 'tmp47', 'tmp14']
['movl', 'tmp13', 'tmp48']
['or', 'tmp48', 'tmp14']
['movl', 'tmp48', 'tmp12']
['call', 'is_int', ['tmp4']]
['movl', '%eax', 'tmp49']
['movl', 'tmp49', 'tmp16']
['call', 'is_bool', ['tmp4']]
['movl', '%eax', 'tmp50']
['movl', 'tmp50', 'tmp17']
['movl', 'tmp16', 'tmp51']
['or', 'tmp51', 'tmp17']
['movl', 'tmp51', 'tmp15']
['movl', 'tmp12', 'tmp52']
['and', 'tmp52', 'tmp15']
['movl', 'tmp52', 'tmp11']
['movl', 'tmp11', 'tmp10']
['movl', 'tmp10', 'tmp53']
['shl', 'tmp53', '$2']
['movl', 'tmp53', 'tmp9']
['movl', 'tmp9', 'tmp54']
['or', 'tmp54', '$0']
['movl', 'tmp54', 'tmp9']
['movl', 'tmp9', 'tmp8']
['call', 'is_true', ['tmp8']]
['movl', '%eax', 'tmp55']
['movl', 'tmp55', 'tmp8']
['movl', '$0', 'tmp18']
['cmp', 'tmp8', 'tmp18', 'tmp57']
['sete', 'tmp56', 'tmp57']
['not', 'tmp56', None]
['and', 'tmp56', '$1']
['movl', 'tmp56', 'tmp8']
['movl', '$1', 'tmp58']
['if', 'tmp8', '0', 'tmp58']
['movl', 'tmp0', 'tmp59']
['shr', 'tmp59', '$2']
['movl', 'tmp59', 'tmp22']
['movl', 'tmp4', 'tmp60']
['shr', 'tmp60', '$2']
['movl', 'tmp60', 'tmp23']
['movl', 'tmp23', 'tmp61']
['addl', 'tmp22', 'tmp61']
['movl', 'tmp61', 'tmp24']
['movl', 'tmp24', 'tmp21']
['movl', 'tmp21', 'tmp62']
['shl', 'tmp62', '$2']
['movl', 'tmp62', 'tmp20']
['movl', 'tmp20', 'tmp63']
['or', 'tmp63', '$0']
['movl', 'tmp63', 'tmp20']
['movl', 'tmp20', 'tmp19']
['else', None, '0']
['call', 'is_big', ['tmp0']]
['movl', '%eax', 'tmp64']
['movl', 'tmp64', 'tmp29']
['call', 'is_big', ['tmp4']]
['movl', '%eax', 'tmp65']
['movl', 'tmp65', 'tmp30']
['movl', 'tmp29', 'tmp66']
['and', 'tmp66', 'tmp30']
['movl', 'tmp66', 'tmp28']
['movl', 'tmp28', 'tmp27']
['movl', 'tmp27', 'tmp67']
['shl', 'tmp67', '$2']
['movl', 'tmp67', 'tmp26']
['movl', 'tmp26', 'tmp68']
['or', 'tmp68', '$0']
['movl', 'tmp68', 'tmp26']
['movl', 'tmp26', 'tmp25']
['call', 'is_true', ['tmp25']]
['movl', '%eax', 'tmp69']
['movl', 'tmp69', 'tmp25']
['movl', '$0', 'tmp31']
['cmp', 'tmp25', 'tmp31', 'tmp71']
['sete', 'tmp70', 'tmp71']
['not', 'tmp70', None]
['and', 'tmp70', '$1']
['movl', 'tmp70', 'tmp25']
['movl', '$1', 'tmp72']
['if', 'tmp25', '1', 'tmp72']
['movl', '$3', 'tmp73']
['not', 'tmp73', None]
['movl', 'tmp73', 'tmp37']
['movl', 'tmp0', 'tmp74']
['and', 'tmp74', 'tmp37']
['movl', 'tmp74', 'tmp36']
['movl', '$3', 'tmp75']
['not', 'tmp75', None]
['movl', 'tmp75', 'tmp39']
['movl', 'tmp4', 'tmp76']
['and', 'tmp76', 'tmp39']
['movl', 'tmp76', 'tmp38']
['call', 'add', ['tmp36', 'tmp38']]
['movl', '%eax', 'tmp77']
['movl', 'tmp77', 'tmp35']
['movl', 'tmp35', 'tmp34']
['movl', 'tmp34', 'tmp78']
['or', 'tmp78', '$3']
['movl', 'tmp78', 'tmp33']
['movl', 'tmp33', 'tmp32']
['else', None, '1']
['call', 'error_pyobj', ['tmp41']]
['movl', '%eax', 'tmp79']
['movl', 'tmp79', 'tmp40']
['movl', 'tmp40', 'tmp32']
['endif', None, '1']
['movl', 'tmp32', 'tmp19']
['endif', None, '0']
['movl', 'tmp19', 'tmp7']
['movl', 'tmp7', 'tmp3']
['print', 'tmp3', None]


True
HERE
['sete', 'tmp56', 'tmp57']
HERE
['sete', 'tmp70', 'tmp71']
True
